##
# Common lint rules used in both Dart projects.
# Rules defined as warnings here is because of performance reasons.
# The ones that are errors are the ones that are more likely to cause bugs.
##

analyzer:
  language:
    strict-casts: true
  errors:
    collection_methods_unrelated_type: error
    iterable_contains_unrelated_type: error
    list_remove_unrelated_type: error
    unrelated_type_equality_checks: error
    await_only_futures: error
    cast_nullable_to_non_nullable: error
    conditional_uri_does_not_exist: error
    null_check_on_nullable_type_parameter: error
    null_closures: error
    prefer_null_aware_method_calls: error
    prefer_null_aware_operators: error
    prefer_typing_uninitialized_variables: error
    recursive_getters: error
    missing_required_param: error
    cancel_subscriptions: warning
    close_sinks: warning
    hash_and_equals: warning
    no_duplicate_case_values: warning
    test_types_in_equals: warning
    avoid_annotating_with_dynamic: warning
    avoid_catching_errors: warning
    avoid_equals_and_hash_code_on_mutable_classes: warning
    avoid_null_checks_in_equality_operators: warning
    avoid_shadowing_type_parameters: warning
    avoid_void_async: warning
    exhaustive_cases: warning
    no_runtimeType_toString: warning
    only_throw_errors: warning
    parameter_assignments: warning
    prefer_contains: warning
    prefer_for_elements_to_map_fromIterable: warning
    prefer_is_empty: warning
    prefer_is_not_empty: warning

linter:
  rules:
    - always_use_package_imports
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_relative_lib_imports
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - cancel_subscriptions
    - close_sinks
    - collection_methods_unrelated_type
    - empty_statements
    - hash_and_equals
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_duplicate_case_values
    - prefer_void_to_null
    - test_types_in_equals
    - unnecessary_statements
    - unrelated_type_equality_checks
    - valid_regexps
    - always_declare_return_types
    - annotate_overrides
    - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_init_to_null
    - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_redundant_argument_values
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null_for_void
    - avoid_shadowing_type_parameters
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cast_nullable_to_non_nullable
    - combinators_ordering
    - conditional_uri_does_not_exist
    - constant_identifier_names
    - curly_braces_in_flow_control_structures
    - deprecated_consistency
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - implementation_imports
    - implicit_call_tearoffs
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_names
    - library_prefixes
    - library_private_types_in_public_api
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - no_runtimeType_toString
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    - omit_local_variable_types
    - only_throw_errors
    - overridden_fields
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_expression_function_bodies
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - recursive_getters
    - require_trailing_commas
    - slash_for_doc_comments
    - sort_constructors_first
    - sort_unnamed_constructors_first
